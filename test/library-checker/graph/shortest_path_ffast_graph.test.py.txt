# verification-helper: PROBLEM https://judge.yosupo.jp/problem/shortest_path

def main():
    N, M, s, t = read(tuple[int, ...])
    G = read(StaticDiGraphWeighted[N,M,0])
    path = G.shortest_path(s, t)
    if path is None:
        write("-1")
    else:
        X, Y = G.D[t], len(path)-1
        write(X, Y)
        for i in range(Y):
            write(path[i],path[i+1])
    
'''
╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸
             https://kobejean.github.io/cp-library               
'''

from copy import copy
from typing import Sequence


import sys
import typing
from collections import deque
from numbers import Number
from types import GenericAlias 
from typing import Callable, Collection, Iterator, TypeVar, Union
import os
from io import BytesIO, IOBase


class FastIO(IOBase):
    BUFSIZE = 8192
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        BUFSIZE = self.BUFSIZE
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        BUFSIZE = self.BUFSIZE
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    stdin: 'IOWrapper' = None
    stdout: 'IOWrapper' = None
    
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable

    def write(self, s):
        return self.buffer.write(s.encode("ascii"))
    
    def read(self):
        return self.buffer.read().decode("ascii")
    
    def readline(self):
        return self.buffer.readline().decode("ascii")

IOWrapper.stdin = IOWrapper(sys.stdin)
IOWrapper.stdout = IOWrapper(sys.stdout)


class TokenStream(Iterator):
    stream = IOWrapper.stdin

    def __init__(self):
        self.queue = deque()

    def __next__(self):
        if not self.queue: self.queue.extend(self.line())
        return self.queue.popleft()
    
    def wait(self):
        if not self.queue: self.queue.extend(self.line())
        while self.queue: yield
        
    def line(self):
        return TokenStream.stream.readline().split()

class CharStream(TokenStream):
    def line(self):
        assert not self.queue
        return next(TokenStream.stream).rstrip()
        
T = TypeVar('T')
ParseFn = Callable[[TokenStream],T]
class Parser:
    def __init__(self, spec: Union[type[T],T]):
        self.parse = Parser.compile(spec)

    def __call__(self, ts: TokenStream) -> T:
        return self.parse(ts)
    
    @staticmethod
    def compile_type(cls: type[T], args = ()) -> T:
        if issubclass(cls, Parsable):
            return cls.compile(*args)
        elif issubclass(cls, (Number, str)):
            def parse(ts: TokenStream):
                return cls(next(ts))              
            return parse
        elif issubclass(cls, tuple):
            return Parser.compile_tuple(cls, args)
        elif issubclass(cls, Collection):
            return Parser.compile_collection(cls, args)
        elif callable(cls):
            def parse(ts: TokenStream):
                return cls(next(ts))              
            return parse
        else:
            raise NotImplementedError()
    
    @staticmethod
    def compile(spec: Union[type[T],T]=int) -> ParseFn[T]:
        if isinstance(spec, (type, GenericAlias)):
            cls = typing.get_origin(spec) or spec
            args = typing.get_args(spec) or tuple()
            return Parser.compile_type(cls, args)
        elif isinstance(offset := spec, Number): 
            cls = type(spec)  
            def parse(ts: TokenStream):
                return cls(next(ts)) + offset
            return parse
        elif isinstance(args := spec, tuple):      
            return Parser.compile_tuple(type(spec), args)
        elif isinstance(args := spec, Collection):  
            return Parser.compile_collection(type(spec), args)
        else:
            raise NotImplementedError()
    
    @staticmethod
    def compile_line(cls: T, spec=int) -> ParseFn[T]:
        if spec is int:
            fn = Parser.compile(spec)
            def parse(ts: TokenStream):
                return cls((int(token) for token in ts.line()))
            return parse
        else:
            fn = Parser.compile(spec)
            def parse(ts: TokenStream):
                return cls((fn(ts) for _ in ts.wait()))
            return parse

    @staticmethod
    def compile_repeat(cls: T, spec, N) -> ParseFn[T]:
        fn = Parser.compile(spec)
        def parse(ts: TokenStream):
            return cls((fn(ts) for _ in range(N)))
        return parse

    @staticmethod
    def compile_children(cls: T, specs) -> ParseFn[T]:
        fns = tuple((Parser.compile(spec) for spec in specs))
        def parse(ts: TokenStream):
            return cls((fn(ts) for fn in fns))  
        return parse
            
    @staticmethod
    def compile_tuple(cls: type[T], specs) -> ParseFn[T]:
        if isinstance(specs, (tuple,list)) and len(specs) == 2 and specs[1] is ...:
            return Parser.compile_line(cls, specs[0])
        else:
            return Parser.compile_children(cls, specs)

    @staticmethod
    def compile_collection(cls, specs):
        if not specs or len(specs) == 1 or isinstance(specs, set):
            return Parser.compile_line(cls, *specs)
        elif (isinstance(specs, (tuple,list)) and len(specs) == 2 
            and isinstance(specs[1], int)):
            return Parser.compile_repeat(cls, specs[0], specs[1])
        else:
            raise NotImplementedError()

class Parsable:
    @classmethod
    def compile(cls):
        def parser(ts: TokenStream):
            return cls(next(ts))
        return parser
from array import array

def i32f(N: int, elm: int = 0):
    return array('i', (elm,)) * N

def u32f(N: int, elm: int = 0):
    return array('I', (elm,)) * N

def i64f(N: int, elm: int = 0):
    return array('q', (elm,)) * N

def i64f(N: int, elm: int = 0):
    return array('Q', (elm,)) * N

class StaticDiGraphWeighted(Sequence, Parsable):
    def __init__(G, N: int, U: list, V: list, W: list):
        M = len(U)
        deg, adj, Wadj = u32f(N), u32f(M), [0]*M

        for u in U:
            deg[u] += 1

        L, idx = u32f(N), 0
        for u in range(N):
            L[u], idx = idx, idx + deg[u]
        R = copy(L)

        for eid in range(M):
            u, v, w = U[eid], V[eid], W[eid]
            adj[r], Wadj[r], R[u] = v, w, (r := R[u])+1
        G.N, G.M, G.L, G.R, G.adj, G.Wadj = N, M, L, R, adj, Wadj

    def __len__(G) -> int:
        return G.N
    
    def __getitem__(G, v):
        l,r = G.L[v],G.R[v]
        return zip(G.adj[l:r], G.W[l:r])

    def dijkstra(G, s: int, t: int = None):
        N, L, R, adj, Wadj = G.N, G.L, G.R, G.adj, G.Wadj
        G.par = par = i32f(N, -1)
        G.D = D = [inf]*N
        D[s] = 0
            
        heap = PriorityQueue(N)
        heap.push(s, 0)
        
        while heap:
            v, d = heap.pop()
            if v == t: break
            if d > D[v]: continue
            for i in range(L[v], R[v]):
                c, w = adj[i], Wadj[i]
                if (nd := d + w) < D[c]:
                    D[c], par[c] = nd, v
                    heap.push(c, nd)
        return D
        
    def shortest_path(G, s: int, t: int):
        D = G.dijkstra(s, t)
        if D[t] == inf: return None
        par = G.par
            
        path = u32f(0)
        path.append(t)
        v = t
        while v != s:
            path.append(v := par[v])
        return path[::-1]
    
    def shortest_path_edge_ids(G, s: int, t: int):
        D = G.dijkstra(s, t)
        if D[t] == inf: return None
        par, par_ei = G.par, G.par_ei
            
        path = elist(G.N)
        v = t
        while v != s:
            path.append(par_ei[v])
            v = par[v] 
        return path[::-1]

    @classmethod
    def compile(cls, N: int, M: int, shift: int = -1):
        def parse(ts: TokenStream):
            U, V, W = u32f(M), u32f(M), [0]*M
            stream = ts.stream
            for i in range(M):
                u, v, W[i] = map(int, stream.readline().split())
                U[i], V[i] = u-shift, v-shift
            return cls(N, U, V, W)
        return parse
    


def elist(est_len: int) -> list: ...
try:
    from __pypy__ import newlist_hint
except:
    def newlist_hint(hint):
        return []
elist = newlist_hint
    

from typing import Iterable
from collections import UserList
from heapq import heapify, heappop, heappush, heappushpop, heapreplace
from typing import Generic, TypeVar

T = TypeVar('T')
class HeapProtocol(Generic[T]):
    def pop(self) -> T: ...
    def push(self, item: T): ...
    def pushpop(self, item: T) -> T: ...
    def replace(self, item: T) -> T: ...

class PriorityQueue(HeapProtocol[int], UserList[int]):
    
    def __init__(self, N: int, ids: Iterable[int] = None, priorities: Iterable[int] = None, /):
        self.shift = N.bit_length()
        self.mask = (1 << self.shift)-1
        if ids is None:
            super().__init__()
        elif priorities is None:
            self.data = ids
            heapify(self.data)
        else:
            self.data = [self.encode(id, priority) for id, priority in zip(ids, priorities)]
            heapify(self.data)

    def encode(self, id, priority):
        return priority << self.shift | id
    
    def decode(self, encoded):
        return self.mask & encoded, encoded >> self.shift
    
    def pop(self):
        return self.decode(heappop(self.data))
    
    def push(self, id: int, priority: int):
        heappush(self.data, self.encode(id, priority))

    def pushpop(self, id: int, priority: int):
        return self.decode(heappushpop(self.data, self.encode(id, priority)))
    
    def replace(self, id: int, priority: int):
        return self.decode(heapreplace(self.data, self.encode(id, priority)))



inf = sys.maxsize

from typing import Type, TypeVar, Union, overload

T = TypeVar('T')
@overload
def read() -> list[int]: ...
@overload
def read(spec: int) -> list[int]: ...
@overload
def read(spec: Union[Type[T],T], char=False) -> T: ...
def read(spec: Union[Type[T],T] = None, char=False):
    if not char:
        if spec is None:
            return list(map(int, input().split()))
        elif isinstance(offset := spec, int):
            return [int(s)+offset for s in input().split()]
        else:
            stream = TokenStream()
    else:
        stream = CharStream()
    parser: T = Parser.compile(spec)
    return parser(stream)

def write(*args, **kwargs):
    """Prints the values to a stream, or to stdout_fast by default."""
    sep, file = kwargs.pop("sep", " "), kwargs.pop("file", IOWrapper.stdout)
    at_start = True
    for x in args:
        if not at_start:
            file.write(sep)
        file.write(str(x))
        at_start = False
    file.write(kwargs.pop("end", "\n"))
    if kwargs.pop("flush", False):
        file.flush()

if __name__ == '__main__':
    main()
