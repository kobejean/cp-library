import cp_library.ds.__header__
from collections import UserList
from cp_library.math.inft_cnst import inft
from typing import Generic, Iterable, Sequence, SupportsIndex, TypeVar
from heapq import heapify, heappop
from cp_library.ds.heapq_max_import import heapsiftup, heapsiftdown
from cp_library.ds.heap_proto import HeapProtocol
from cp_library.ds.elist_fn import elist


T = TypeVar('T')
class Task(Generic[T]):
    def __init__(self, idx: SupportsIndex, id: int, priority: T):
        self.idx = idx
        self.id = id
        self.priority = priority

    def __lt__(self, other):
        return self.priority < other.priority
    
    def __repr__(self) -> str:
        return f'({self.idx}, {self.id}, {self.priority})'

class TaskList(UserList[Task[T]]):
    def __init__(self, N: int, tuples: Iterable[tuple[int,T]] = None):
        tasks = [Task(-1, id, inft) for id in range(N)]
        data = elist(N) # empty list allocating space for N items
        if tuples is not None:
            for id, priority in tuples:
                task = tasks[id]
                task.idx = len(data)
                task.priority = priority
                data.append(task)
        self.data = data
        self.tasks = tasks
                
    def __setitem__(self, idx, task: Task[T]):
        # update index of task
        task.idx = idx # set to current index
        self.data[idx] = task

    def pop(self, i=-1):
        task = self.data.pop(i)
        # update index of task (-1 means not in list)
        task.idx = -1
        return task
    
    def append(self, task: Task[T]) -> None:
        # update index of task
        task.idx = len(self.data)
        return self.data.append(task)
    
    def __contains__(self, id):
        return self.tasks[id].idx != -1
    
    def index(self, id) -> int:
        return self.tasks[id].idx

class MinHeapIndexed(Sequence[T], HeapProtocol[T]):
    
    def __init__(self, N: int, data: Iterable[tuple[int,T]] = None):
        self.heap = TaskList(N, data)
        self.tasks = self.heap.tasks
        heapify(self.heap)
    
    def pop(self):
        task = heappop(self.heap)
        return task.id, task.priority
    
    def push(self, id: SupportsIndex, priority: T):
        task = self.tasks[id]
        assert priority < task.priority, f"task ({priority=} {task.priority=}) with lower priority already exists"
        task.priority = priority
        if task.idx == -1:
            # not in heap
            self.heap.append(task)
        # decrease key
        heapsiftdown(self.heap, 0, task.idx)

    def replace(self, id: SupportsIndex, priority: T):
        task = self.tasks[id]
        assert priority < task.priority, f"task ({priority=} {task.priority=}) with lower priority already exists"
        return_task = self.heap[0]
        return_task.idx = -1
        self.heap[0] = task
        heapsiftup(self.heap, 0)
        return return_task.id, return_task.priority
    
    def __contains__(self, id):
        return self.tasks[id].idx != -1

    def __len__(self):
        return len(self.heap.data)

    def __getitem__(self, id):
        return self.tasks[id].priority
    
    def __setitem__(self, id, priority: T):
        task = self.tasks[id]
        assert task.id != -1, f"task id {id} is not in heap\n {self}"

        if priority > task.priority: # priority is increased
            task.priority = priority
            heapsiftup(self.heap, task.idx)
        elif priority < task.priority:
            task.priority = priority
            heapsiftdown(self.heap, task.idx)
    
    def __repr__(self) -> str:
        heap_repr = ' '.join(repr(p) for p in self.heap.data)
        priorities_repr = ' '.join(str(p) for p in self)
        return heap_repr + '\n' + priorities_repr
